---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Step2 from "../components/Step2.md";
import Step1 from "../components/Step1.md";
import Step3 from "../components/Step3.md";
---

<Layout title="Welcome to Astro.">
  <main>
    <header>
      <h1>Venmo to YNAB</h1>
    </header>
    <aside>
      <p>
        I use YNAB and find myself annoyed at trying to import my Venmo
        transactions manually.{" "}
        I also wanted to build something with the <a
          target="_blank"
          rel="noreferrer"
          href="https://astro.build/">Astro framwork</a
        >{" "}
        and decided to build a Venmo to YNAB csv converter. This makes it so that I
        no longer have to manually import transactions. Hope someone finds this helpful!
        ðŸ¥‚
      </p>

      <p>Check out the code at the <a target="_blank" rel="noreferrer" href="https://github.com/davidacevedo/venmo-to-ynab">Venmo to YNAB Github repo.</a></p>
    </aside>

    <Card title="Step 1: Download statement from venmo">
      <Step1 />
    </Card>
    <Card title="Step 2: Convert your statement">
      <Step2 />
      <div>
        <label for="venmo-csv">Upload Venmo statement</label>
        <input type="file" id="venmo-csv" accept=".csv" />
      </div>
      <a
        id="download"
        style="display: none"
        download="venmo-to-ynab-supported.csv">Download YNAB supported CSV</a
      >
    </Card>
    <Card title="Step 3: Import on YNAB">
      <Step3 />
    </Card>

    <script>
      import { format, parseISO } from "date-fns";
      import fileReaderStream from "filereader-stream";
      import csvReal from "csv-parser";

      // Find our component DOM on the page.
      const fileInput = document.getElementById(
        "venmo-csv"
      ) as HTMLInputElement;
      fileInput.addEventListener("change", async (val) => {
        const files = (val?.target as HTMLInputElement)?.files || [];
        if (files.length) {
          const parsedCsv: any[] = [];
          fileReaderStream(files[0])
            .pipe(csvReal({ skipLines: 2 }))
            .on("data", (data: any) => parsedCsv.push(data))
            .on("end", () => {
              const finalCsvObject = parsedCsv
                .map((line) => {
                  const amount = line["Amount (total)"]
                    .replace(" ", "")
                    .replace("$", "")
                    .replace("+", "")
                    .replace(",", "");

                  return {
                    date:
                      line.Datetime &&
                      format(parseISO(line.Datetime), "MM/dd/yyyy"),
                    payee: "",
                    // Replace new lines with semicolons for easier readability
                    memo: line.Note.split("\n").join(";"),
                    amount,
                  };
                })
                .slice(1, -1);

              let csvResult = "Date,Payee,Memo,Amount\n";
              finalCsvObject.forEach(({ date, payee, memo, amount }) => {
                csvResult += `${date},${payee},${memo},${amount}\n`;
              });
              const blob = new Blob([csvResult], { type: ".csv" });
              const downloadAnchor = document.getElementById(
                "download"
              ) as HTMLAnchorElement;
              downloadAnchor.href = URL.createObjectURL(blob);
              downloadAnchor.style.display = "initial";
            });
        }
      });
    </script>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
    color: #222;
  }
</style>
