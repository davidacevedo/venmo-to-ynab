---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Step2 from '../components/Step2.md';
import Step1 from '../components/Step1.md';
import Step3 from '../components/Step3.md';

---

<Layout title="Welcome to Astro.">
	<main>

		<h1><span class="text-gradient">Venmo to YNAB</span></h1>
		<p>
			I use YNAB and find myself annoyed at trying to import my Venmo transactions manually.{" "}
			I also wanted to build something with the <a target="_blank" rel="noreferrer" href="https://astro.build/">Astro framwork</a>{" "}
			and decided to build a Venmo to YNAB csv converter. This makes it so that I no longer have to manually import transactions.
			Hope someone finds this helpful! ðŸ¥‚
		</p>

		<Card title="Step 1: Download statement from venmo">
			<Step1 />
		</Card>
		<Card title="Step 2: Convert your statement">
			<Step2 />
			<div>
				<label for="venmo-csv">Venmo Statement CSV: </label>
				<input type="file" id="venmo-csv" accept=".csv" />
			</div>
			<a id="download" style="display: none" download="venmo-to-ynab-supported.csv">Download YNAB supported CSV</a>
		</Card>
		<Card title="Step 3: Import on YNAB">
			<Step3 />
		</Card>

		<script>
		import { format, parseISO } from 'date-fns'
		import fileReaderStream from "filereader-stream";
		import csvReal from "csv-parser";

		// Find our component DOM on the page.
		const fileInput = document.getElementById('venmo-csv') as HTMLInputElement;
		fileInput.addEventListener('change', async (val) => {
			const files = (val?.target as HTMLInputElement)?.files || [];
			if (files.length) {
				const parsedCsv: any[] = [];
					fileReaderStream(files[0])
						.pipe(csvReal({ skipLines: 2 }))
						.on("data", (data: any) => parsedCsv.push(data))
						.on("end", () => {
							const finalCsvObject = parsedCsv.map((line) => {
								const amount = line['Amount (total)'].replace(' ', '').replace('$', '').replace('+', '').replace(',', '');

								return {
									date: line.Datetime && format(parseISO(line.Datetime), 'MM/dd/yyyy'),
									payee: '',
									// Replace new lines with semicolons for easier readability
									memo: line.Note.split('\n').join(';'),
									amount
								}
							}).slice(1, -1);

							let csvResult = 'Date,Payee,Memo,Amount\n'
							finalCsvObject.forEach(({ date, payee, memo, amount }) => {
								csvResult += `${date},${payee},${memo},${amount}\n`
							});
							const blob = new Blob([csvResult], { type: '.csv' });
							const downloadAnchor = (document.getElementById('download') as HTMLAnchorElement);
							downloadAnchor.href = URL.createObjectURL(blob);
							downloadAnchor.style.display = 'initial'
						});
			}
		})
	</script>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
